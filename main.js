(()=>{var n={705:n=>{"use strict";n.exports=function(n){var e=[];return e.toString=function(){return this.map((function(e){var t="",r=void 0!==e[5];return e[4]&&(t+="@supports (".concat(e[4],") {")),e[2]&&(t+="@media ".concat(e[2]," {")),r&&(t+="@layer".concat(e[5].length>0?" ".concat(e[5]):""," {")),t+=n(e),r&&(t+="}"),e[2]&&(t+="}"),e[4]&&(t+="}"),t})).join("")},e.i=function(n,t,r,o,a){"string"==typeof n&&(n=[[null,n,void 0]]);var i={};if(r)for(var s=0;s<this.length;s++){var c=this[s][0];null!=c&&(i[c]=!0)}for(var A=0;A<n.length;A++){var l=[].concat(n[A]);r&&i[l[0]]||(void 0!==a&&(void 0===l[5]||(l[1]="@layer".concat(l[5].length>0?" ".concat(l[5]):""," {").concat(l[1],"}")),l[5]=a),t&&(l[2]?(l[1]="@media ".concat(l[2]," {").concat(l[1],"}"),l[2]=t):l[2]=t),o&&(l[4]?(l[1]="@supports (".concat(l[4],") {").concat(l[1],"}"),l[4]=o):l[4]="".concat(o)),e.push(l))}},e}},476:n=>{"use strict";n.exports=function(n){var e=n[1],t=n[3];if(!t)return e;if("function"==typeof btoa){var r=btoa(unescape(encodeURIComponent(JSON.stringify(t)))),o="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(r),a="/*# ".concat(o," */");return[e].concat([a]).join("\n")}return[e].join("\n")}},96:function(n,e,t){n=t.nmd(n),function(t,r){"use strict";var o={};t.PubSub?(o=t.PubSub,console.warn("PubSub already loaded, using existing version")):(t.PubSub=o,function(n){var e={},t=-1,r="*";function o(n,e,t){try{n(e,t)}catch(n){setTimeout(function(n){return function(){throw n}}(n),0)}}function a(n,e,t){n(e,t)}function i(n,t,r,i){var s,c=e[t],A=i?a:o;if(Object.prototype.hasOwnProperty.call(e,t))for(s in c)Object.prototype.hasOwnProperty.call(c,s)&&A(c[s],n,r)}function s(n){var t=String(n);return Boolean(Object.prototype.hasOwnProperty.call(e,t)&&function(n){var e;for(e in n)if(Object.prototype.hasOwnProperty.call(n,e))return!0;return!1}(e[t]))}function c(n,e,t,o){var a=function(n,e,t){return function(){var o=String(n),a=o.lastIndexOf(".");for(i(n,n,e,t);-1!==a;)a=(o=o.substr(0,a)).lastIndexOf("."),i(n,o,e,t);i(n,r,e,t)}}(n="symbol"==typeof n?n.toString():n,e,o);return!!function(n){for(var e=String(n),t=s(e)||s(r),o=e.lastIndexOf(".");!t&&-1!==o;)o=(e=e.substr(0,o)).lastIndexOf("."),t=s(e);return t}(n)&&(!0===t?a():setTimeout(a,0),!0)}n.publish=function(e,t){return c(e,t,!1,n.immediateExceptions)},n.publishSync=function(e,t){return c(e,t,!0,n.immediateExceptions)},n.subscribe=function(n,r){if("function"!=typeof r)return!1;n="symbol"==typeof n?n.toString():n,Object.prototype.hasOwnProperty.call(e,n)||(e[n]={});var o="uid_"+String(++t);return e[n][o]=r,o},n.subscribeAll=function(e){return n.subscribe(r,e)},n.subscribeOnce=function(e,t){var r=n.subscribe(e,(function(){n.unsubscribe(r),t.apply(this,arguments)}));return n},n.clearAllSubscriptions=function(){e={}},n.clearSubscriptions=function(n){var t;for(t in e)Object.prototype.hasOwnProperty.call(e,t)&&0===t.indexOf(n)&&delete e[t]},n.countSubscriptions=function(n){var t,r,o=0;for(t in e)if(Object.prototype.hasOwnProperty.call(e,t)&&0===t.indexOf(n)){for(r in e[t])o++;break}return o},n.getSubscriptions=function(n){var t,r=[];for(t in e)Object.prototype.hasOwnProperty.call(e,t)&&0===t.indexOf(n)&&r.push(t);return r},n.unsubscribe=function(t){var r,o,a,i="string"==typeof t&&(Object.prototype.hasOwnProperty.call(e,t)||function(n){var t;for(t in e)if(Object.prototype.hasOwnProperty.call(e,t)&&0===t.indexOf(n))return!0;return!1}(t)),s=!i&&"string"==typeof t,c="function"==typeof t,A=!1;if(!i){for(r in e)if(Object.prototype.hasOwnProperty.call(e,r)){if(o=e[r],s&&o[t]){delete o[t],A=t;break}if(c)for(a in o)Object.prototype.hasOwnProperty.call(o,a)&&o[a]===t&&(delete o[a],A=!0)}return A}n.clearSubscriptions(t)}}(o)),void 0!==n&&n.exports&&(e=n.exports=o),e.PubSub=o,n.exports=e=o}("object"==typeof window&&window||this)},426:(n,e,t)=>{"use strict";t.d(e,{Z:()=>s});var r=t(476),o=t.n(r),a=t(705),i=t.n(a)()(o());i.push([n.id,"@import url(https://fonts.googleapis.com/css2?family=Big+Shoulders+Stencil+Text:wght@900&family=Inter:wght@400;600&display=swap);"]),i.push([n.id,':root {\n  --blue-outline: #0d5f8b;\n  --blue-dark: #0f1a3e;\n  --blue: #1a95cd;\n  --grey: yellowgreen;\n}\n\nbody {\n  background: var(--blue-dark);\n  position: relative;\n  margin: 0;\n  height: 100vh;\n}\n\n* {\n  box-sizing: border-box;\n}\n\n.header {\n  display: flex;\n  justify-content: center;\n}\n\nh1 {\n  width: min-content;\n  font-family: "Big Shoulders Stencil Text", sans-serif;\n  font-size: 100px;\n  margin-top: 30px;\n  margin-bottom: 80px;\n  color: #ffffff;\n  border: 10px solid #ffffff;\n  border-radius: 20px;\n  padding: 10px 20px;\n}\n\n.content {\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  flex-wrap: wrap;\n  padding: 0 40px;\n  gap: 50px;\n}\n\n.grid {\n  display: grid;\n  grid-template-columns: repeat(10, 40px);\n  grid-template-rows: repeat(10, 40px);\n  gap: 4px;\n  width: min-content;\n\n  background: var(--blue-outline);\n  padding: 4px;\n}\n\n.cell {\n  background: var(--blue);\n  position: relative;\n}\n\n.cell:hover {\n  filter: brightness(0.85);\n}\n\n.playerOne > .ship {\n  background: var(--grey);\n}\n\n.hit::before,\n.hit.ship::before {\n  content: "";\n  position: absolute;\n  top: 6px;\n  bottom: 6px;\n  left: 6px;\n  right: 6px;\n\n  background: rgb(255, 255, 255);\n  border-radius: 32px;\n}\n\n.hit.ship::before {\n  background: rgb(210, 69, 69);\n}\n\n/* Ship Selection */\n\n.shipSelection {\n  display: flex;\n  flex-direction: column;\n  gap: 8px;\n  padding: 10px;\n  width: 300px;\n  min-height: 444px;\n  background: var(--blue);\n  border: 4px solid var(--blue-outline);\n}\n\n.shipSelection > p {\n  margin: 0;\n  font-family: "Inter", sans-serif;\n  font-weight: 600;\n  color: var(--blue-outline);\n}\n\n.shipDiv {\n  flex: 1;\n  display: flex;\n  flex-wrap: wrap;\n  justify-content: center;\n  align-items: center;\n  align-content: center;\n  gap: 8px;\n  height: 100%;\n}\n\n.shipDiv > .ship {\n  display: flex;\n  flex-direction: column;\n  gap: 4px;\n\n  height: min-content;\n\n  background: var(--blue-outline);\n  padding: 4px;\n}\n\n.shipDiv > .ship[data-axis="y"] {\n  flex-direction: row;\n}\n\n.shipDiv > .ship > * {\n  height: 40px;\n  width: 40px;\n  background: var(--grey);\n}\n\n/* Modal */\n\n.modalBg {\n  position: absolute;\n  top: 0;\n  bottom: 0;\n  left: 0;\n  right: 0;\n  background: #00000065;\n\n  display: flex;\n  justify-content: center;\n  align-items: center;\n}\n\n.modal {\n  height: 300px;\n  width: 500px;\n  background: white;\n  padding: 20px;\n  border-radius: 14px;\n\n  display: flex;\n  flex-direction: column;\n  justify-content: space-evenly;\n  align-items: center;\n}\n\n.modal > .text,\n.modal > .button {\n  font-size: 40px;\n  font-family: "inter", sans-serif;\n  font-weight: 400;\n}\n\n.modal > .text {\n  color: var(--blue-dark);\n}\n.modal > .button {\n  color: white;\n  background: var(--blue-dark);\n  padding: 12px 24px;\n  border-radius: 10px;\n  transition: 200ms;\n}\n\n.modal > .button:hover {\n  transform: scale(1.05);\n  cursor: pointer;\n}\n',"",{version:3,sources:["webpack://./src/style.css"],names:[],mappings:"AACA;EACE,uBAAuB;EACvB,oBAAoB;EACpB,eAAe;EACf,mBAAmB;AACrB;;AAEA;EACE,4BAA4B;EAC5B,kBAAkB;EAClB,SAAS;EACT,aAAa;AACf;;AAEA;EACE,sBAAsB;AACxB;;AAEA;EACE,aAAa;EACb,uBAAuB;AACzB;;AAEA;EACE,kBAAkB;EAClB,qDAAqD;EACrD,gBAAgB;EAChB,gBAAgB;EAChB,mBAAmB;EACnB,cAAc;EACd,0BAA0B;EAC1B,mBAAmB;EACnB,kBAAkB;AACpB;;AAEA;EACE,aAAa;EACb,uBAAuB;EACvB,mBAAmB;EACnB,eAAe;EACf,eAAe;EACf,SAAS;AACX;;AAEA;EACE,aAAa;EACb,uCAAuC;EACvC,oCAAoC;EACpC,QAAQ;EACR,kBAAkB;;EAElB,+BAA+B;EAC/B,YAAY;AACd;;AAEA;EACE,uBAAuB;EACvB,kBAAkB;AACpB;;AAEA;EACE,wBAAwB;AAC1B;;AAEA;EACE,uBAAuB;AACzB;;AAEA;;EAEE,WAAW;EACX,kBAAkB;EAClB,QAAQ;EACR,WAAW;EACX,SAAS;EACT,UAAU;;EAEV,8BAA8B;EAC9B,mBAAmB;AACrB;;AAEA;EACE,4BAA4B;AAC9B;;AAEA,mBAAmB;;AAEnB;EACE,aAAa;EACb,sBAAsB;EACtB,QAAQ;EACR,aAAa;EACb,YAAY;EACZ,iBAAiB;EACjB,uBAAuB;EACvB,qCAAqC;AACvC;;AAEA;EACE,SAAS;EACT,gCAAgC;EAChC,gBAAgB;EAChB,0BAA0B;AAC5B;;AAEA;EACE,OAAO;EACP,aAAa;EACb,eAAe;EACf,uBAAuB;EACvB,mBAAmB;EACnB,qBAAqB;EACrB,QAAQ;EACR,YAAY;AACd;;AAEA;EACE,aAAa;EACb,sBAAsB;EACtB,QAAQ;;EAER,mBAAmB;;EAEnB,+BAA+B;EAC/B,YAAY;AACd;;AAEA;EACE,mBAAmB;AACrB;;AAEA;EACE,YAAY;EACZ,WAAW;EACX,uBAAuB;AACzB;;AAEA,UAAU;;AAEV;EACE,kBAAkB;EAClB,MAAM;EACN,SAAS;EACT,OAAO;EACP,QAAQ;EACR,qBAAqB;;EAErB,aAAa;EACb,uBAAuB;EACvB,mBAAmB;AACrB;;AAEA;EACE,aAAa;EACb,YAAY;EACZ,iBAAiB;EACjB,aAAa;EACb,mBAAmB;;EAEnB,aAAa;EACb,sBAAsB;EACtB,6BAA6B;EAC7B,mBAAmB;AACrB;;AAEA;;EAEE,eAAe;EACf,gCAAgC;EAChC,gBAAgB;AAClB;;AAEA;EACE,uBAAuB;AACzB;AACA;EACE,YAAY;EACZ,4BAA4B;EAC5B,kBAAkB;EAClB,mBAAmB;EACnB,iBAAiB;AACnB;;AAEA;EACE,sBAAsB;EACtB,eAAe;AACjB",sourcesContent:['@import url("https://fonts.googleapis.com/css2?family=Big+Shoulders+Stencil+Text:wght@900&family=Inter:wght@400;600&display=swap");\n:root {\n  --blue-outline: #0d5f8b;\n  --blue-dark: #0f1a3e;\n  --blue: #1a95cd;\n  --grey: yellowgreen;\n}\n\nbody {\n  background: var(--blue-dark);\n  position: relative;\n  margin: 0;\n  height: 100vh;\n}\n\n* {\n  box-sizing: border-box;\n}\n\n.header {\n  display: flex;\n  justify-content: center;\n}\n\nh1 {\n  width: min-content;\n  font-family: "Big Shoulders Stencil Text", sans-serif;\n  font-size: 100px;\n  margin-top: 30px;\n  margin-bottom: 80px;\n  color: #ffffff;\n  border: 10px solid #ffffff;\n  border-radius: 20px;\n  padding: 10px 20px;\n}\n\n.content {\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  flex-wrap: wrap;\n  padding: 0 40px;\n  gap: 50px;\n}\n\n.grid {\n  display: grid;\n  grid-template-columns: repeat(10, 40px);\n  grid-template-rows: repeat(10, 40px);\n  gap: 4px;\n  width: min-content;\n\n  background: var(--blue-outline);\n  padding: 4px;\n}\n\n.cell {\n  background: var(--blue);\n  position: relative;\n}\n\n.cell:hover {\n  filter: brightness(0.85);\n}\n\n.playerOne > .ship {\n  background: var(--grey);\n}\n\n.hit::before,\n.hit.ship::before {\n  content: "";\n  position: absolute;\n  top: 6px;\n  bottom: 6px;\n  left: 6px;\n  right: 6px;\n\n  background: rgb(255, 255, 255);\n  border-radius: 32px;\n}\n\n.hit.ship::before {\n  background: rgb(210, 69, 69);\n}\n\n/* Ship Selection */\n\n.shipSelection {\n  display: flex;\n  flex-direction: column;\n  gap: 8px;\n  padding: 10px;\n  width: 300px;\n  min-height: 444px;\n  background: var(--blue);\n  border: 4px solid var(--blue-outline);\n}\n\n.shipSelection > p {\n  margin: 0;\n  font-family: "Inter", sans-serif;\n  font-weight: 600;\n  color: var(--blue-outline);\n}\n\n.shipDiv {\n  flex: 1;\n  display: flex;\n  flex-wrap: wrap;\n  justify-content: center;\n  align-items: center;\n  align-content: center;\n  gap: 8px;\n  height: 100%;\n}\n\n.shipDiv > .ship {\n  display: flex;\n  flex-direction: column;\n  gap: 4px;\n\n  height: min-content;\n\n  background: var(--blue-outline);\n  padding: 4px;\n}\n\n.shipDiv > .ship[data-axis="y"] {\n  flex-direction: row;\n}\n\n.shipDiv > .ship > * {\n  height: 40px;\n  width: 40px;\n  background: var(--grey);\n}\n\n/* Modal */\n\n.modalBg {\n  position: absolute;\n  top: 0;\n  bottom: 0;\n  left: 0;\n  right: 0;\n  background: #00000065;\n\n  display: flex;\n  justify-content: center;\n  align-items: center;\n}\n\n.modal {\n  height: 300px;\n  width: 500px;\n  background: white;\n  padding: 20px;\n  border-radius: 14px;\n\n  display: flex;\n  flex-direction: column;\n  justify-content: space-evenly;\n  align-items: center;\n}\n\n.modal > .text,\n.modal > .button {\n  font-size: 40px;\n  font-family: "inter", sans-serif;\n  font-weight: 400;\n}\n\n.modal > .text {\n  color: var(--blue-dark);\n}\n.modal > .button {\n  color: white;\n  background: var(--blue-dark);\n  padding: 12px 24px;\n  border-radius: 10px;\n  transition: 200ms;\n}\n\n.modal > .button:hover {\n  transform: scale(1.05);\n  cursor: pointer;\n}\n'],sourceRoot:""}]);const s=i},379:n=>{"use strict";var e=[];function t(n){for(var t=-1,r=0;r<e.length;r++)if(e[r].identifier===n){t=r;break}return t}function r(n,r){for(var a={},i=[],s=0;s<n.length;s++){var c=n[s],A=r.base?c[0]+r.base:c[0],l=a[A]||0,p="".concat(A," ").concat(l);a[A]=l+1;var d=t(p),u={css:c[1],media:c[2],sourceMap:c[3],supports:c[4],layer:c[5]};if(-1!==d)e[d].references++,e[d].updater(u);else{var f=o(u,r);r.byIndex=s,e.splice(s,0,{identifier:p,updater:f,references:1})}i.push(p)}return i}function o(n,e){var t=e.domAPI(e);return t.update(n),function(e){if(e){if(e.css===n.css&&e.media===n.media&&e.sourceMap===n.sourceMap&&e.supports===n.supports&&e.layer===n.layer)return;t.update(n=e)}else t.remove()}}n.exports=function(n,o){var a=r(n=n||[],o=o||{});return function(n){n=n||[];for(var i=0;i<a.length;i++){var s=t(a[i]);e[s].references--}for(var c=r(n,o),A=0;A<a.length;A++){var l=t(a[A]);0===e[l].references&&(e[l].updater(),e.splice(l,1))}a=c}}},569:n=>{"use strict";var e={};n.exports=function(n,t){var r=function(n){if(void 0===e[n]){var t=document.querySelector(n);if(window.HTMLIFrameElement&&t instanceof window.HTMLIFrameElement)try{t=t.contentDocument.head}catch(n){t=null}e[n]=t}return e[n]}(n);if(!r)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");r.appendChild(t)}},216:n=>{"use strict";n.exports=function(n){var e=document.createElement("style");return n.setAttributes(e,n.attributes),n.insert(e,n.options),e}},565:(n,e,t)=>{"use strict";n.exports=function(n){var e=t.nc;e&&n.setAttribute("nonce",e)}},795:n=>{"use strict";n.exports=function(n){if("undefined"==typeof document)return{update:function(){},remove:function(){}};var e=n.insertStyleElement(n);return{update:function(t){!function(n,e,t){var r="";t.supports&&(r+="@supports (".concat(t.supports,") {")),t.media&&(r+="@media ".concat(t.media," {"));var o=void 0!==t.layer;o&&(r+="@layer".concat(t.layer.length>0?" ".concat(t.layer):""," {")),r+=t.css,o&&(r+="}"),t.media&&(r+="}"),t.supports&&(r+="}");var a=t.sourceMap;a&&"undefined"!=typeof btoa&&(r+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(a))))," */")),e.styleTagTransform(r,n,e.options)}(e,n,t)},remove:function(){!function(n){if(null===n.parentNode)return!1;n.parentNode.removeChild(n)}(e)}}}},589:n=>{"use strict";n.exports=function(n,e){if(e.styleSheet)e.styleSheet.cssText=n;else{for(;e.firstChild;)e.removeChild(e.firstChild);e.appendChild(document.createTextNode(n))}}}},e={};function t(r){var o=e[r];if(void 0!==o)return o.exports;var a=e[r]={id:r,loaded:!1,exports:{}};return n[r].call(a.exports,a,a.exports,t),a.loaded=!0,a.exports}t.n=n=>{var e=n&&n.__esModule?()=>n.default:()=>n;return t.d(e,{a:e}),e},t.d=(n,e)=>{for(var r in e)t.o(e,r)&&!t.o(n,r)&&Object.defineProperty(n,r,{enumerable:!0,get:e[r]})},t.o=(n,e)=>Object.prototype.hasOwnProperty.call(n,e),t.nmd=n=>(n.paths=[],n.children||(n.children=[]),n),t.nc=void 0,(()=>{"use strict";var n=t(96),e=t.n(n);const r=(n="Player")=>{const t=(()=>{let n=0;const e=Array(10).fill().map((()=>Array(10).fill({isHit:!1})));return{getBoard:()=>e,placeShip:(t,r,o,a)=>{if("x"===a){if(t+o-1>9)throw new Error("Placement out of bounds")}else{if("y"!==a)throw new Error("Invalid axis prop");if(r-o+1<0)throw new Error("Placement out of bounds")}for(let n=0;n<o;n+=1){const o="x"===a?t+n:t,i="y"===a?r-n:r;if(Object.prototype.hasOwnProperty.call(e[o][i],"ship"))throw new Error("Invalid placement: Ships cannot overlap")}const i=(n=>{let e=0;return{hit:()=>(e<n&&(e+=1),e),isSunk:()=>e>=n,getHits:()=>e}})(o);for(let n=0;n<o;n+=1){const o="x"===a?t+n:t,s="y"===a?r-n:r;e[o][s]={...e[o][s],ship:i}}n+=1},receiveAttack:(t,r)=>{if(e[t][r].isHit)throw new Error("Cell has already been hit");Object.prototype.hasOwnProperty.call(e[t][r],"ship")&&(e[t][r].ship.hit(),e[t][r].ship.isSunk()&&(n-=1)),e[t][r]={...e[t][r],isHit:!0}},hasNoShips:()=>0===n}})();let r;const o=(r,o,a,i)=>{t.placeShip(parseInt(r,10),parseInt(o,10),parseInt(a,10),i),e().publish("SHIP_PLACED",{player:n,x:r,y:o,length:a,axis:i})};return e().subscribe("RQST_PLACE_SHIP",((e,{x:t,y:r,length:a,axis:i,player:s})=>{if(s===n)try{o(t,r,a,i)}catch{}})),{...t,getName:()=>n,setOpponent:n=>{r=n},attack:(n,e)=>r.receiveAttack(n,e),receiveAttack:(r,o)=>{t.receiveAttack(r,o),e().publish("ATTACK_RECEIVED",{player:n,x:r,y:o})},placeShip:o}};var o=t(379),a=t.n(o),i=t(795),s=t.n(i),c=t(569),A=t.n(c),l=t(565),p=t.n(l),d=t(216),u=t.n(d),f=t(589),h=t.n(f),E=t(426),b={};b.styleTagTransform=h(),b.setAttributes=p(),b.insert=A().bind(null,"head"),b.domAPI=s(),b.insertStyleElement=u(),a()(E.Z,b),E.Z&&E.Z.locals&&E.Z.locals;const g=[2,3,3,4,5],m=r("playerOne"),x=(()=>{const n=r("playerTwo");return{...n,placeShip:e=>{for(let t=0;t<100;t+=1)try{const t=Math.floor(10*Math.random()),r=Math.floor(10*Math.random()),o=0===Math.floor(2*Math.random())?"x":"y";return void n.placeShip(t,r,e,o)}catch(n){}throw new Error("Unable to generate ship placement")},attack:()=>{for(let e=0;e<100;e+=1)try{const e=Math.floor(10*Math.random()),t=Math.floor(10*Math.random());return void n.attack(e,t)}catch(n){}}}})(),C=((n,t,r)=>{n.setOpponent(t),t.setOpponent(n);const o=(r,{x:o,y:a})=>{n.attack(o,a),t.hasNoShips()?e().publish("GAME_OVER",{winner:n.getName()}):(t.attack(),n.hasNoShips()&&e().publish("GAME_OVER",{winner:t.getName()}))};return e().subscribe("ATTACK_CELL",o),{setup:()=>{r.forEach((n=>t.placeShip(n)))},play:o}})(m,x,g),y=(()=>{const n=(n,t)=>{const r=document.createElement("div");return r.dataset.x=n,r.dataset.y=t,r.classList.add("cell"),r.addEventListener("dragover",(n=>{n.preventDefault(),n.dataTransfer.dropEffect="move"})),r.addEventListener("drop",(n=>{n.preventDefault();const t=JSON.parse(n.dataTransfer.getData("text/plain")),r=parseInt(n.currentTarget.dataset.x,10),o=parseInt(n.currentTarget.dataset.y,10);e().publish("RQST_PLACE_SHIP",{...t,x:"x"===t.axis?r-t.cell:r,y:"y"===t.axis?o+t.cell:o})})),r},t=n=>{e().publish("ATTACK_CELL",{x:n.currentTarget.dataset.x,y:n.currentTarget.dataset.y}),n.currentTarget.removeEventListener("click",t)},r=e=>{const r=document.createElement("div");r.classList.add("grid",e);for(let o=0;o<10;o+=1)for(let a=0;a<10;a+=1){const i=n(o,a);"playerOne"!==e&&i.addEventListener("click",t),r.appendChild(i)}return r},o=n=>{document.querySelector(".content").appendChild(r(n))},a=n=>{const{axis:e,length:t}=n.currentTarget.dataset;if("x"===e){const e=n.currentTarget.offsetHeight/t;return Math.floor(n.offsetY/e)}const r=n.currentTarget.offsetWidth/t;return Math.floor((n.currentTarget.offsetWidth-n.offsetX)/r)};return e().subscribe("SHIP_PLACED",((n,{player:t,x:r,y:o,length:a,axis:i})=>{const s=document.querySelector(`.grid.${t}`),c=parseInt(r,10),A=parseInt(o,10);for(let n=0;n<a;n+=1){const e="x"===i?c+n:c,t="y"===i?A-n:A;s.querySelector(`[data-x='${e}'][data-y='${t}']`).classList.add("ship")}const l=document.querySelector(`.ship[data-length='${a}']`);if(!l)return;l.remove();const p=document.querySelector(".shipDiv");p.hasChildNodes()||(p.parentNode.remove(),e().publish("ALL_SHIPS_PLACED"))})),e().subscribe("ATTACK_RECEIVED",((n,{player:e,x:t,y:r})=>{document.querySelector(`.grid.${e}`).querySelector(`[data-x='${t}'][data-y='${r}']`).classList.add("hit")})),e().subscribe("GAME_OVER",((n,{winner:e})=>{document.querySelectorAll(".playerTwo>.cell").forEach((n=>n.removeEventListener("click",t)));const r=document.querySelector(".content"),o=document.createElement("div"),a=document.createElement("div"),i=document.createElement("div"),s=document.createElement("div");o.classList.add("modalBg"),a.classList.add("modal"),i.classList.add("text"),s.classList.add("button"),i.textContent="You "+("playerOne"===e?"won":"lost"),s.textContent="Play again",s.addEventListener("click",(()=>window.location.reload())),a.appendChild(i),a.appendChild(s),o.appendChild(a),r.appendChild(o)})),{getCell:n,getGrid:r,newGrid:o,boardSetup:(n,e)=>{o("playerOne");const t=document.querySelector(".content"),r=document.createElement("div");r.classList.add("shipSelection");const i=document.createElement("p");i.textContent="Double click to rotate";const s=document.createElement("div");s.classList.add("shipDiv"),e.forEach((e=>{const t=document.createElement("div");t.dataset.length=e,t.dataset.axis="x",t.classList.add("ship"),t.draggable=!0,t.addEventListener("dragstart",(e=>{e.dataTransfer.setData("text/plain",JSON.stringify({length:e.currentTarget.dataset.length,axis:e.currentTarget.dataset.axis,cell:a(e),player:n}))})),t.addEventListener("dblclick",(n=>{const e=n.currentTarget;e.dataset.axis="x"===e.dataset.axis?"y":"x"}));for(let n=0;n<e;n+=1){const n=document.createElement("div");t.appendChild(n)}s.appendChild(t)})),r.appendChild(i),r.appendChild(s),t.appendChild(r)}}})();y.boardSetup(m.getName(),g),e().subscribe("ALL_SHIPS_PLACED",(()=>{C.setup(),y.newGrid(x.getName())}))})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,